@model ChatViewModel
<!-- Иконка для открытия чата -->
<button id="open-chat" style="position: fixed; bottom: 20px; right: 20px; z-index: 1000; border-radius: 15px;">💬</button>

<!-- Контейнер для чата, изначально скрыт -->
<div id="chat-container" style="display: none; position: fixed; bottom: 70px; right: 20px; width: 30%; height: 75%; border: 1px solid #ccc; background: white; z-index: 999; border-radius: 10px;">
    <div id="chat-header" style="background: #007BFF;  height: 8%; color: white; padding: 10px; border-radius: 10px; display: flex; justify-content: space-between; align-items: center;">
        <h4 style="margin: 0;">Чат с поддержкой</h4>
        <button id="close-chat" style="background: none; border: none; color: white; cursor: pointer;">&times;</button>
    </div>

    <div id="chat-messages" style="max-height: 83%; overflow-y: auto; padding: 10px; display: none;">
        <!-- Сообщения будут добавлены здесь -->
        @if (Model.Messages != null && Model.Messages.Any())
        {
            foreach (var message in Model.Messages)
            {
                <div class="chat-message admin" style="display:none;">
                    <div class="admin-text">
                        @message.Message
                    </div>
                    <small class="small-gray">@message.Data.ToString("HH:mm")</small>
                </div>
            }
        }
        else
        {
            <p>Нет сообщений.</p>
        }

        <div id="question-buttons-container" style=" display: none;">
            <div id="question-buttons">
                @Html.Partial("_QuestionButtons", new QuestionButtonsViewModel { MainQuestions = Model.MainQuestions, Uid = Model.Uid })
            </div>
            <!-- Поле для ручного ввода -->
           
        </div>
        <!-- Контейнер для поля ввода и кнопки отправки -->
        <div id="input-container" style="position: fixed;bottom:13%;width: 30%;">
            <!--  background: white; -->
            <input type="text" id="manualInput" placeholder="Введите ваш вопрос" />
            <button id="submitManualInput">Отправить</button>
        </div>
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    // Скрипт для открытия и закрытия чата
    document.getElementById('open-chat').onclick = function () {
        const chatContainer = document.getElementById('chat-container');
        // Переключаем видимость чата
        if (chatContainer.style.display === 'block') {
            chatContainer.style.display = 'none'; // Закрываем чат
        } else {
            chatContainer.style.display = 'block'; // Открываем чат
            loadChatMessages(); // Загружаем сообщения с задержкой
        }
    };

    document.getElementById('close-chat').onclick = function () {
        document.getElementById('chat-container').style.display = 'none'; // Закрываем чат при нажатии на крестик
    };
    // Функция для добавления сообщения с задержкой
    function appendMessageWithDelay(messageHtml, delay) {
        return new Promise(resolve => {
            setTimeout(() => {
                $("#chat-messages").append(messageHtml); // Добавляем сообщение в чат
                scrollToBottom(); // Прокрутка вниз
                resolve(); // Разрешаем промис после добавления сообщения
            }, delay);
        });
    }

    function loadChatMessages() {
        const messages = document.querySelectorAll('#chat-messages .chat-message');

        let delay = 700;
        messages.forEach((message) => {
            setTimeout(() => {
                message.style.display = 'flex'; // Показываем сообщение с задержкой
 
            }, delay);
            delay += 700; // Увеличиваем задержку на 700 мс для каждого сообщения
        });

        document.getElementById('chat-messages').style.display = 'flex'; // Используем flex для контейнера

        setTimeout(() => {
            document.getElementById('input-container').style.display = 'flex';
            document.getElementById('question-buttons-container').style.display = 'block';  
        }, delay);
        scrollToBottom(); // Прокрутка вниз
    }
    $("#back-button").hide(); // Предполагаем, что у кнопки "Назад" есть id="back-button"

    let questionHistory = {}; // Объект для хранения истории вопросов
    let currentIndex = -1; // Индекс текущего вопроса
    let isProcessing = false; // Флаг для блокировки обработки
    let countMainQuestions = 0;

    $(document).ready(function () {
        console.log("Документ готов, загружаем существующие сообщения...");
        loadMessages();
        scrollToBottom(); // Прокрутка вниз
        // Сохраняем главные вопросы в questionHistory
        $(".question-button").each(function () {
            const questionId = $(this).data("id");
            const tree = $(this).data("tree");
            const questionName = $(this).data("name");
            currentIndex++;
            questionHistory[currentIndex] = { questionId, tree, questionName };
            countMainQuestions++;
            console.log(`Главный вопрос добавлен: ID=${questionId}, Name=${questionName}, Tree=${tree}`);
        });

        // Функция для добавления сообщения с задержкой
        function appendMessageWithDelay(messageHtml, delay) {
            return new Promise(resolve => {
                setTimeout(() => {
                    $("#chat-messages").append(messageHtml); // Добавляем сообщение в чат
                    scrollToBottom(); // Прокрутка вниз
                    resolve(); // Разрешаем промис после добавления сообщения
                }, delay);
            });
        }

        $(document).on("click", ".question-button", async function () {
            if (isProcessing) {
                return; // Если в процессе обработки, выходим
            }

            isProcessing = true; // Устанавливаем флаг обработки
            var questionId = $(this).data("id"); // Получаем id вопроса
            var tree = $(this).data("tree"); // Получаем id дерева
            var uid = "@Model.Uid"; // Получаем uid текущего пользователя
            var guestUid = "@Model.GuestUid"; // Получаем uid гостя из модели
            var questionName = $(this).data("name"); // Получаем имя вопроса
            var currentTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }); // Получаем текущее время

            // Клонируем контейнер вопросов (только кнопки)
            var clonedContainer = $("#question-buttons").clone().attr("id", "question-buttons-clone").addClass("disabled"); // Клонируем и делаем его некликабельным
            var Container = $("#question-buttons-container");

            // Если это кнопка "Назад", обрабатываем отдельно
            if (questionId === -1) {
                if (currentIndex > 0) {
                    currentIndex--; // Переход к предыдущему вопросу
                    var previousState = questionHistory[currentIndex];
                    console.log("currentIndex:", currentIndex);

                    // Проверка на возврат к главным вопросам
                    if (currentIndex < countMainQuestions) {
                        console.log("currentIndex(MainQ):", currentIndex);
                        // Очищаем историю и сохраняем только главные вопросы
                        currentIndex = -1; // Сбрасываем индекс

                        // Обновление интерфейса для главных вопросов
                        var mainQuestionsHtml = ""; // Здесь будет HTML для главных вопросов
                        for (let i = 0; i < countMainQuestions; i++) {
                            const id = questionHistory[i].questionId;
                            const name = questionHistory[i].questionName;
                            mainQuestionsHtml += `<button class="question-button" data-id="${id}" data-tree="0" data-name="${name}" style="border-radius: 15px;">${name}</button>`;
                        }
                        // Скрыть элемент
                        $("#question-buttons-container").hide(); // Скрывает элемент с id question-buttons-container
                        // Сообщение от пользователя
                        // var userMessageReturn = `<div class="chat-message guest"><div class="guest-text">Назад </div><br /><small class="small-gray">${currentTime}</small></div>`;
                        //  await appendMessageWithDelay(userMessageReturn, 500); // Добавляем сообщение пользователя с задержкой
                        scrollToBottom(); // Прокручиваем вниз после загрузки всех сообщений
                        // Добавляем сообщение о возврате к главным вопросам
                        var chatMessage = `<div class="chat-message admin"><div class="admin-text">Вы вернулись к главным вопросам. Пожалуйста, выберите следующий раздел:</div><br /><small class="small-gray">${currentTime}</small></div>`;
                        await appendMessageWithDelay(chatMessage, 700); // Добавляем сообщение админа с задержкой
                        scrollToBottom(); // Прокручиваем вниз после загрузки всех сообщений
                        $("#question-buttons").html(mainQuestionsHtml); // Обновляем кнопки на главные вопросы
                        await appendMessageWithDelay(Container, 800); // Добавляем оригинал с задержкой
                        // В дальнейшем, когда нужно показать элемент снова
                        $("#question-buttons-container").show(); // Показывает скрытый элемент
                        // Скрываем кнопку "Назад"
                        $("button[data-id='-1']").hide(); // Скрываем кнопку "Назад"

                        // Логируем текущую историю вопросов
                        console.log("Текущая история вопросов:", questionHistory);
                        console.log("currentIndex:", currentIndex);
                        currentIndex = currentIndex + countMainQuestions;
                        scrollToBottom(); // Прокручиваем вниз после загрузки всех сообщений
                    } else {
                        // Если вернулись к предыдущему вопросу
                        questionId = previousState.questionId;
                        tree = previousState.tree;
                        questionName = previousState.questionName;

                        // Вызываем метод выбора вопроса
                        $.post('@Url.Action("SelectQuestion", "Chat")', {
                            questionId: questionId,
                            tree: tree,
                            uid: uid,
                            guestUid: guestUid,
                            questionName: questionName
                        })
                            .done(async function (data) {

                                // Обновляем только под-вопросы
                                $("#question-buttons").html(data); // Очищаем предыдущие кнопки и обновляем под-вопросы
                                // Скрыть элемент
                                $("#question-buttons-container").hide(); // Скрывает элемент с id question-buttons-container
                                // Добавляем клонированный блок перед сообщением о следующем шаге

                                await appendMessageWithDelay(clonedContainer, 10); // Добавляем клонированный контейнер с задержкой
                                scrollToBottom(); // Прокручиваем вниз после загрузки всех сообщений
                                var userMessageReturn = `<div class="chat-message guest"><div class="guest-text">Назад </div><br /><small class="small-gray">${currentTime}</small></div>`;
                                await appendMessageWithDelay(userMessageReturn, 700); // Добавляем сообщение пользователя с задержкой
                                scrollToBottom(); // Прокручиваем вниз после загрузки всех сообщений
                                // Добавляем сообщение о возврате в чат
                                // var chatMessage = `<div class="chat-message admin"><div class="admin-text">Вы вернулись к вопросу: ${questionName}. <br />Пожалуйста, выберите следующий раздел:</div><br /><small class="small-gray">${currentTime}</small></div>`;
                                //   await appendMessageWithDelay(chatMessage, 700); // Добавляем сообщение админа с задержкой
                                scrollToBottom(); // Прокручиваем вниз после загрузки всех сообщений
                                await appendMessageWithDelay(Container, 800); // Добавляем оригинал с задержкой
                                // В дальнейшем, когда нужно показать элемент снова
                                $("#question-buttons-container").show(); // Показывает скрытый элемент
                                scrollToBottom();

                                // Логируем текущую историю вопросов
                                console.log("Текущая история вопросов:", questionHistory);
                                console.log("currentIndex:", currentIndex);
                            })
                            .fail(function () {
                                console.error("Ошибка при возврате к предыдущему вопросу.");
                            });
                    }
                }
                isProcessing = false; // Сбрасываем флаг обработки
                return; // Выходим из функции
            }

            // Сохраняем текущее состояние в истории
            currentIndex++;
            questionHistory[currentIndex] = { questionId, tree, questionName }; // Сохраняем состояние по индексу

            // Сообщение от пользователя
            var userMessage = `<div class="chat-message guest"><div class="guest-text">${questionName}</div><br /><small class="small-gray">${currentTime}</small></div>`;

            // Вызываем метод выбора вопроса
            $.post('@Url.Action("SelectQuestion", "Chat")', {
                questionId: questionId,
                tree: tree,
                uid: uid,
                guestUid: guestUid,
                questionName: questionName
            })
                .done(async function (data) {

                    // Обновляем оригинальный блок кнопок
                    $("#question-buttons").html(data); // Заменяем старые кнопки новыми
                    // Скрыть элемент
                    $("#question-buttons-container").hide(); // Скрывает элемент с id question-buttons-container
                    // Добавляем клонированный блок перед сообщением о следующем шаге
                    await appendMessageWithDelay(clonedContainer, 1); // Добавляем клонированный контейнер с задержкой
                    scrollToBottom(); // Прокручиваем вниз после загрузки всех сообщений
                    await appendMessageWithDelay(userMessage, 500); // Добавляем сообщение пользователя с задержкой
                    scrollToBottom(); // Прокручиваем вниз после загрузки всех сообщений
                    // Добавляем сообщение о следующем шаге
                    var nextStepMessage = `<div class="chat-message admin"><div class="admin-text">Пожалуйста, выберите следующий раздел:</div><br /><small class="small-gray">${currentTime}</small></div>`;
                    await appendMessageWithDelay(nextStepMessage, 500); // Добавляем сообщение админа с задержкой
                    scrollToBottom(); // Прокручиваем вниз после загрузки всех сообщений
                    await appendMessageWithDelay(Container, 500); // Добавляем оригинал с задержкой
                    // В дальнейшем, когда нужно показать элемент снова
                    $("#question-buttons-container").show(); // Показывает скрытый элемент
                    scrollToBottom();

                    // Логируем текущую историю вопросов
                    console.log("Текущая история вопросов:", questionHistory);
                })
                .fail(function () {
                    console.error("Ошибка при получении под-вопросов.");
                })
                .always(function () {
                    isProcessing = false; // Сбрасываем флаг обработки после завершения
                });
        });
        var noQuestionCount = 0; //Счётчик для неправильный вопросов
        var isOperatorMode = false; //режим оператора

        // Обработчик ручного ввода
        $('#submitManualInput').click(function () {
            var userInput = $('#manualInput').val().trim(); // Получаем текст из текстового поля
            var uid = '@Model.Uid'; // Получаем uid из модели
            var currentTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }); // Получаем текущее время в локальном формате

            if (userInput) {
                // Отображаем сообщение пользователя в чате
                var userMessage = `<div class="chat-message guest"><div class="guest-text">${userInput} </div><br /><small class="small-gray">${currentTime}</small></div>`;
                $("#chat-messages").append(userMessage);
                scrollToBottom(); // Прокручиваем вниз после добавления нового сообщения

                // Сохраняем сообщение в базе данных
                $.post('@Url.Action("SaveUserMessage", "Chat")', { uid: uid, message: userInput, guestUid: '@Model.GuestUid' })
                    .fail(function () {
                        console.error("Ошибка при сохранении сообщения.");
                    });
                if (isOperatorMode) {
                }
                else {
                    // Отправляем запрос на сервер для проверки, существует ли вопрос
                    $.post('@Url.Action("CheckQuestion", "Chat")', { uid: uid, question: userInput })
                        .done(function (response) {
                            // Если вопрос существует, обновляем под-вопросы
                            $("#question-buttons").html(response).show(); // Обновляем кнопки и показываем их
                            var chatMessage = `<div class="chat-message admin"><div class="admin-text">Вы выбрали: ${userInput}. <br/>Пожалуйста, выберите следующий раздел:</div>  <br /><small class="small-gray">${currentTime}</small></div>`;
                            $("#chat-messages").append(chatMessage);
                            scrollToBottom(); // Прокручиваем вниз после добавления нового сообщения

                            // Добавляем оригинальный контейнер кнопок вниз
                            var Container = $("#question-buttons-container"); // Получаем оригинальный контейнер
                            $("#chat-messages").append(Container); // Добавляем оригинал вниз

                            // Сбрасываем счетчик, если вопрос найден
                            noQuestionCount = 0;
                        })
                        .fail(function () {
                            // Если вопрос не найден, отображаем сообщение об ошибке
                            noQuestionCount++; // Увеличиваем счетчик
                            var errorMessage = `<div class="chat-message admin"><div class="admin-text">Извините, этого нет.</div><br /><small class="small-gray">${currentTime}</small></div>`;
                            $("#chat-messages").append(errorMessage);
                            scrollToBottom(); // Прокручиваем вниз после добавления нового сообщения
                            // Добавляем оригинальный контейнер кнопок вниз
                            var Container = $("#question-buttons-container"); // Получаем оригинальный контейнер
                            $("#chat-messages").append(Container); // Добавляем оригинал вниз

                            // Проверяем, если счетчик достиг 3
                            if (noQuestionCount === 3) {
                                var operatorMessage = `<div class="chat-message admin"><div class="admin-text">Перевожу на оператора.</div><br /><small class="small-gray">${currentTime}</small></div>`;
                                $("#chat-messages").append(operatorMessage);
                                scrollToBottom(); // Прокручиваем вниз после добавления нового сообщения

                                // Переключаемся в режим оператора
                                isOperatorMode = true;
                                $('#manualInput').attr("placeholder", "Введите ваше сообщение оператору");
                                $('#submitManualInput').text("Отправить оператору");
                                var Container = $("#question-buttons-container"); // Получаем оригинальный контейнер
                                $("#chat-messages").append(Container); // Добавляем оригинал вниз

                                // Скрываем кнопки вопросов
                                $("#question-buttons").hide();

                                // Очищаем поле ввода
                                $('#manualInput').val('');
                            }
                        });
                }

                // Очищаем поле ввода
                $('#manualInput').val('');
            } else {
                alert("Пожалуйста, введите вопрос.");
            }
            var Container = $("#question-buttons-container"); // Получаем оригинальный контейнер
            $("#chat-messages").append(Container); // Добавляем оригинал вниз
        });
    });
    function loadMessages() {
        var uid = '@Model.Uid'; // Получаем uid из модели
        var guestName = '@Model.GuestName'; // Получаем имя гостя из модели
        $.post('@Url.Action("UpdateMessages", "Chat")', { uid: uid })
            .done(function (messages) {
                $("#chat-messages").empty(); // Очищаем текущее содержимое чата
                messages.forEach(function (message) {
                    var messageTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });// Получаем текущее время в локальном формате // Форматируем время
                    var chatMessage;

                    // Проверяем, является ли сообщение системным
                    if (message.UserName === "Система") {
                        chatMessage = `<div class="chat-message"><strong>Система:</strong> ${message.Message} <br /><small class="small-gray">${messageTime}</small></div>`;
                    } else {
                        chatMessage = `<div class="chat-message"><strong>${guestName}:</strong> ${message.Message} <br /><small class="small-gray">${messageTime}</small></div>`;
                    }

                    $("#chat-messages").append(chatMessage);
                });
                scrollToBottom(); // Прокручиваем вниз после загрузки всех сообщений
            })
            .fail(function () {
                console.error("Ошибка при загрузке сообщений.");
            });
    }

    function scrollToBottom() {
        var chatMessages = $("#chat-messages");
        chatMessages.scrollTop(chatMessages[0].scrollHeight);
    }
</script>
<style>
    #chat-container {
        display: none;
        position: fixed;
        bottom: 70px;
        right: 20px;
        width: 30%;
        height: 70%;
        border: 1px solid #ccc;
        background: white;
        z-index: 999;
        border-radius: 10px;
        display: flex;
        flex-direction: column; /* Вертикальное расположение элементов */
    }

    #chat-messages {
        flex-grow: 1; /* Позволяет этому контейнеру занимать оставшееся пространство */
        max-height: 85%; /* Максимальная высота для области сообщений */
        overflow-y: auto; /* Прокрутка для сообщений */

        display: flex;
        flex-direction: column; /* Расположение сообщений в столбик */
        gap: 5px; /* Отступы между сообщениями */
    }

    .chat-message {
        display: flex; /* Используем flex для выравнивания */
        align-items: center; /* Центрируем по высоте */
        /*  padding: 3px; Отступы внутри области сообщений */
        max-width: 100%; /* Максимальная ширина 80% */

        position: relative; /* Для использования в будущем, если нужно */
    }

    /* Админ */
    .admin {
        text-align: left; /* Выравнивание текста влево */
        align-self: flex-start; /* Выравнивание сообщений влево */
        color: black;
        width: 80%;
    }
    /* Гость */
    .guest {
        text-align: right; /* Выравнивание текста вправо */
        align-self: flex-end; /* Выравнивание сообщений вправо */
        flex-direction: row-reverse; /* Изменяем порядок на противоположный */
    }

    /* Элемент текста сообщения от администратора */
    .admin-text {
        background-color: #e0f7fa; /* Цвет фона для сообщений от Admin */
        padding: 10px; /* Отступы внутри текста */
        border-radius: 5px; /* Скругленные углы */
        margin-right: 10px; /* Отступ справа для времени */
    }

    /* Элемент текста сообщения от пользователя */
    .guest-text {
        background-color: #ffe0b2; /* Цвет фона для сообщений от guest */
        padding: 10px; /* Отступы внутри текста */
        border-radius: 5px; /* Скругленные углы */
        margin-right: 10px; /* Отступ справа для времени */
    }

    /* Общий стиль для времени */
    .small-gray {
        font-size: 0.5em; /* Размер шрифта меньше стандартного */
        color: gray; /* Цвет текста времени */
        background-color: transparent; /* Прозрачный фон */
        padding: 2px 5px; /* Отступы внутри элемента времени (по желанию) */
        border-radius: 3px; /* Скругленные углы (по желанию) */
    }

    .question-button {
        border-radius: 15px;
        width: 100%;
        margin-block: 3px 3px;
        /* margin-bottom: 2px;  */
    }

    .question-buttons-container {
        border-radius: 15px;
        width: 100%;
        /*  margin-bottom: 5px; */
    }

    #input-container {
        display: flex; /* Используем flex для выравнивания */
        justify-content: space-between; /* Распределяем содержимое по краям */
        width: 70%;
    }

    /* Поле ввода */
    #manualInput {
        width: 60%; /* Поле ввода занимает 70% ширины контейнера */
        border-radius: 15px;
        padding: 3px; /* Отступы внутри поля ввода */
        border: 1px solid #ccc; /* Граница вокруг поля ввода */
    }

    /* Кнопка отправки */
    #submitManualInput {
        width: 35%; /* Кнопка отправки занимает 25% ширины контейнера */
        border-radius: 15px;
        margin-left: 3px; /* Отступ слева от кнопки*/
        margin-right: 30px; /* Отступ слева от кнопки */
        border: none; /* Убираем стандартную границу */
        background-color: #007BFF; /* Цвет фона кнопки */
        color: white; /* Цвет текста кнопки */
        cursor: pointer; /* Курсор при наведении */
    }

    .disabled {
        pointer-events: none; /* Отключает все события мыши */
        color: white; /* Устанавливаем цвет текста на белый для контраста */
    }

</style>